//__________________________________________________________________________________
//__________________________________________________________________________________
//
//						             Charlatan
//__________________________________________________________________________________
//__________________________________________________________________________________

ADD_KIT ~RAChar~
    ~RAChar 1 1 1 1 1 1 1 1~
    ~RAChar 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0~
	~RAChar 3 12 3 13 3 16~
	~RAChar 0 0 0 0 0 0~
	~RAChar 18 18 18 18 18 18~
    ~RAChar 18 18 18 18 18 18~
	~RAChar 0 0 0 1 1 1 1 1 1~
	~RAChar 0 0 0 0 0 0~
	~Charlatan\Tables\RAChar.2da~
	~K_B_H	K_B_D   K_B_G   K_B_E   K_B_HE   K_B_HL   K_B_HO~
	~0x00400000 5~
	~Ba0~
	~LEAT19 SHLD20 * * RING39 RING29 CLCK26 BOOT04 AMUL27 BRAC16 BELT10 * * * * * * SW1H54 WAFLAIL *~
	SAY @101
	SAY @102
	SAY @103

LAF fl#add_kit_ee
	STR_VAR
		kit_name = ~RAChar~
END

COPY "Charlatan\Spl\RAChaCha.spl" override	SAY NAME1 @104	SAY UNIDENTIFIED_DESC @105

COPY "Charlatan\Spl\RAChaChF.spl" override

COPY "Charlatan\Spl\RAChaChS.spl" override

COPY "Charlatan\Spl\RAChaPer.spl" override	SAY NAME1 @106	SAY UNIDENTIFIED_DESC @107

COPY_EXISTING ~SPWI107.spl~ ~override/RAChaFri.spl~
LPM SPELL_TO_INNATE

COPY "Charlatan\Spl\RAChaPre.spl" override	SAY NAME1 @108	SAY UNIDENTIFIED_DESC @109

COPY "Charlatan\Spl\RAChaPrB.spl" override
	LPF ALTER_EFFECT INT_VAR match_parameter1 = 1 match_opcode = 139 parameter1 = RESOLVE_STR_REF (@110) END
	
COPY "Charlatan\Spl\RAChaPrG.spl" override

// Code for infinity spell kindly provided by Grammarsalad.

	//Charm

COPY_EXISTING ~RAChaCha.spl~ ~override~
	PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
	READ_SHORT 0x1c spell_type
PATCH_IF  (%spell_type% = 4) BEGIN
    READ_LONG 	0x64	ab_off			                             // Abilities Offset
	READ_SHORT	0x68	ab_num			                             // Number of Abilities
	READ_SHORT	0x6a	fx_off			                             // Effects Offset
	READ_SHORT	0x70	glob_fx			                             // Number of Global Effects
	SET	glob_add = 0

INSERT_BYTES (fx_off) 0x30
	WRITE_SHORT (fx_off) 171			                             // opcode
	WRITE_BYTE (fx_off + 0x2) 1			                             // Target (self)
	// WRITE_BYTE (fx_off + 0x4) 1			                         // Level 1
	// WRITE_LONG (fx_off + 0x8) 0			                         // Wizard
	WRITE_LONG (fx_off + 0xc) 9			                             // timing (Perm)
    // WRITE_LONG (fx_off + 0xe) 10                                  // duration
	WRITE_BYTE (fx_off + 0x12) 100			                         // Probability 1
	WRITE_ASCII (fx_off + 0x14) ~RAChaCha~                           // resource
	++glob_add

INSERT_BYTES (fx_off) 0x30
	WRITE_SHORT (fx_off) 172			                             // opcode
	WRITE_BYTE (fx_off + 0x2) 1			                             // Target (self)
	// WRITE_BYTE (fx_off + 0x4) 1			                         // Level 1
	// WRITE_LONG (fx_off + 0x8) 0			                         // Wizard
	WRITE_LONG (fx_off + 0xc) 9			                             // timing (Perm)
    // WRITE_LONG (fx_off + 0xe) 10                                  // duration
	WRITE_BYTE (fx_off + 0x12) 100			                         // Probability 1
    WRITE_ASCII (fx_off + 0x14) ~RAChaCha~                           // resource
	++glob_add
	
    glob_fx += glob_add
	WRITE_SHORT 0x70 glob_fx			                             // Increment Number of Global Effects
	FOR (i = 0; i < ab_num; ++i) BEGIN		                         // Offset Effect Index for all Abilities
	  READ_SHORT (ab_off + i * 0x28 + 0x20) fx_idx
	  WRITE_SHORT (ab_off + i * 0x28 + 0x20) (fx_idx + glob_add)
	END
END
END

	//Perceive The Truth
	
COPY_EXISTING ~RAChaPer.spl~ ~override~
	PATCH_IF (~%SOURCE_SIZE%~ > ~0x71~) BEGIN
	READ_SHORT 0x1c spell_type
PATCH_IF  (%spell_type% = 4) BEGIN
    READ_LONG 	0x64	ab_off			                             // Abilities Offset
	READ_SHORT	0x68	ab_num			                             // Number of Abilities
	READ_SHORT	0x6a	fx_off			                             // Effects Offset
	READ_SHORT	0x70	glob_fx			                             // Number of Global Effects
	SET	glob_add = 0

INSERT_BYTES (fx_off) 0x30
	WRITE_SHORT (fx_off) 171			                             // opcode
	WRITE_BYTE (fx_off + 0x2) 1			                             // Target (self)
	// WRITE_BYTE (fx_off + 0x4) 1			                         // Level 1
	// WRITE_LONG (fx_off + 0x8) 0			                         // Wizard
	WRITE_LONG (fx_off + 0xc) 9			                             // timing (Perm)
    // WRITE_LONG (fx_off + 0xe) 10                                  // duration
	WRITE_BYTE (fx_off + 0x12) 100			                         // Probability 1
	WRITE_ASCII (fx_off + 0x14) ~RAChaPer~                           // resource
	++glob_add

INSERT_BYTES (fx_off) 0x30
	WRITE_SHORT (fx_off) 172			                             // opcode
	WRITE_BYTE (fx_off + 0x2) 1			                             // Target (self)
	// WRITE_BYTE (fx_off + 0x4) 1			                         // Level 1
	// WRITE_LONG (fx_off + 0x8) 0			                         // Wizard
	WRITE_LONG (fx_off + 0xc) 9			                             // timing (Perm)
    // WRITE_LONG (fx_off + 0xe) 10                                  // duration
	WRITE_BYTE (fx_off + 0x12) 100			                         // Probability 1
    WRITE_ASCII (fx_off + 0x14) ~RAChaPer~                           // resource
	++glob_add
	
    glob_fx += glob_add
	WRITE_SHORT 0x70 glob_fx			                             // Increment Number of Global Effects
	FOR (i = 0; i < ab_num; ++i) BEGIN		                         // Offset Effect Index for all Abilities
	  READ_SHORT (ab_off + i * 0x28 + 0x20) fx_idx
	  WRITE_SHORT (ab_off + i * 0x28 + 0x20) (fx_idx + glob_add)
	END
END
END

// Code for armor restriction kindly provided by Gwendolyne.

COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
	PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
		READ_BYTE 0x18 flags1
		PATCH_IF ((flags1 & BIT3) = BIT3) BEGIN
		READ_ASCII	0x22 animation (2)
		PATCH_IF ("%animation%" STRING_EQUAL_CASE "3A") BEGIN
		  LPF ~ADD_ITEM_EQEFFECT~ INT_VAR opcode = 319 target = 1 timing = 2 parameter1 = IDS_OF_SYMBOL (~Kit~ ~RAChar~) parameter2 = 9 special = RESOLVE_STR_REF (@102) END
		END
		END
	END
	
ACTION_FOR_EACH file IN ~RACHCH~ ~RACHPE~ ~RACHPR~ BEGIN
COPY ~Charlatan\Bam\%file%.bam~ ~override~
    LPF UPDATE_PVRZ_INDICES
    RET
      original_base_index
      new_base_index
    END

  ACTION_IF (original_base_index >= 0 AND new_base_index >= 0) BEGIN
    LAF INSTALL_PVRZ
    INT_VAR
      original_base_index
      new_base_index
    STR_VAR
      source_file = EVAL ~Charlatan\Bam\MOS%original_base_index%.pvrz~
    END
  END
END	
	
//EoF